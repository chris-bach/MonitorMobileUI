{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\MonitorScreens\\\\MyDocsView.js\";\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\nimport { argonTheme, tabs } from \"../constants\";\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width;\n\nimport styles from \"../constants/ScreenTheme\";\nimport { LogInContext } from \"../context/LogInContext\";\nimport { getDocumentsByOrganisationId } from \"../Services/DocumentService\";\nimport ViewDocumentsTile from \"../components/ViewDocumentsTile\";\n\nvar MyDocsView = function MyDocsView(props) {\n  var _useContext = useContext(LogInContext),\n      userInfo = _useContext.userInfo;\n\n  var _useContext2 = useContext(LogInContext),\n      userOrganisation = _useContext2.userOrganisation;\n\n  var organisationId = userOrganisation.organisationId;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      docList = _useState2[0],\n      setDocList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      docsData = _useState4[0],\n      setData = _useState4[1];\n\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  useEffect(function () {\n    getDocumentsByOrganisationId(organisationId).then(function (response) {\n      var docs = [];\n      response.data.forEach(function (object) {\n        docs.push(object);\n      });\n      setDocList(docs);\n      console.log(response);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n  useEffect(function () {\n    var tableData = [];\n    docList.forEach(function (docs, index) {\n      var users = {\n        id: index,\n        documentName: docs.name,\n        description: docs.description,\n        documentId: docs.documentId,\n        parentInfo: docs.parentInfo,\n        actions: React.createElement(\"div\", {\n          className: \"actions-right\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        }, React.createElement(Input, {\n          type: \"checkbox\",\n          id: index,\n          value: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 25\n          }\n        }))\n      };\n      tableData.push(users);\n    });\n    setData(tableData);\n  }, [docList]);\n\n  var renderItem = function renderItem(itemData) {\n    return React.createElement(ViewDocumentsTile, {\n      name: itemData.item.documentName,\n      description: itemData.item.description,\n      documentId: itemData.item.documentId,\n      parentInfo: itemData.item.parentInfo,\n      onSelect: function onSelect() {\n        props.navigation.navigate('View PDF', {\n          params: {}\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return React.createElement(Block, {\n    flex: true,\n    style: styles.group,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, React.createElement(Block, {\n    flex: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id.toString();\n    },\n    data: docsData,\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default MyDocsView;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/MonitorScreens/MyDocsView.js"],"names":["React","useEffect","useState","useContext","Block","Text","Button","GaButton","theme","argonTheme","tabs","Select","Icon","Input","Header","Switch","Dimensions","get","width","styles","LogInContext","getDocumentsByOrganisationId","ViewDocumentsTile","MyDocsView","props","userInfo","userOrganisation","organisationId","docList","setDocList","docsData","setData","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","then","response","docs","data","forEach","object","push","console","log","catch","error","tableData","index","users","id","documentName","name","description","documentId","parentInfo","actions","renderItem","itemData","item","navigation","navigate","params","group","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from \"react\";\r\nimport {\r\n    ScrollView,\r\n    View,\r\n    FlatList,\r\n    StyleSheet,\r\n    Dimensions,\r\n    TouchableOpacity,\r\n    TouchableNativeFeedback,\r\n    Alert, Platform\r\n} from \"react-native\";\r\n// Galio components\r\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\r\n// Argon themed components\r\nimport { argonTheme, tabs } from \"../constants\";\r\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\r\n\r\nconst { width } = Dimensions.get(\"screen\");\r\n\r\nimport styles from \"../constants/ScreenTheme\";\r\nimport {LogInContext} from \"../context/LogInContext\";\r\n\r\nimport {getDocumentsByOrganisationId} from \"../Services/DocumentService\";\r\nimport ViewDocumentsTile from \"../components/ViewDocumentsTile\";\r\n\r\n/**\r\n * @author Chris Bautista\r\n * @description This component is unused as we removed the view documents function.\r\n * It was meant to give the user an overview of the documents, similar to MyJobsView.\r\n */\r\nconst MyDocsView = props => {\r\n    // const organisationId = 1;\r\n    const {userInfo} = useContext(LogInContext);\r\n    const {userOrganisation} = useContext(LogInContext);\r\n\r\n    const organisationId = userOrganisation.organisationId;\r\n\r\n    const [docList, setDocList] = useState([]);\r\n    const [docsData, setData] = useState([]);\r\n\r\n    let TouchableCmp = TouchableOpacity;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= 21) {\r\n        TouchableCmp = TouchableNativeFeedback; //ripple effect\r\n    }\r\n\r\n    useEffect(() => {\r\n            getDocumentsByOrganisationId(organisationId)\r\n                .then((response) => {\r\n                    const docs = []\r\n                    response.data.forEach(object => {\r\n                        docs.push(object)\r\n                        // setIsLoading(true)\r\n                    })\r\n                    setDocList(docs);\r\n                    console.log(response);\r\n                }).catch(error => {\r\n                console.log(error);\r\n            })\r\n        },\r\n        []);\r\n\r\n    useEffect(() => {\r\n        const tableData = [];\r\n        docList.forEach((docs, index) => {\r\n            let users = {\r\n                id: index,\r\n                documentName: docs.name,\r\n                description: docs.description,\r\n                documentId: docs.documentId,\r\n                parentInfo: docs.parentInfo,\r\n                actions: (\r\n                    <div className=\"actions-right\">\r\n                        <Input type=\"checkbox\" id={index} value={index}/>\r\n                    </div>\r\n                ),\r\n            }\r\n            tableData.push(users);\r\n        })\r\n        setData(tableData);\r\n    }, [docList]);\r\n\r\n    const renderItem = itemData => {\r\n        return (\r\n            <ViewDocumentsTile\r\n                name={itemData.item.documentName}\r\n                description={itemData.item.description}\r\n                documentId={itemData.item.documentId}\r\n                parentInfo={itemData.item.parentInfo}\r\n                onSelect={() => {\r\n                    props.navigation.navigate('View PDF',\r\n                        {\r\n                            params: {\r\n                                // jobIdentifier: itemData.item.jobIdentifier,\r\n                                // address: itemData.item.address,\r\n                                // job_id: itemData.item.id\r\n                            }\r\n                        });\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n        <Block flex style={styles.group}>\r\n            <Block flex>\r\n                <FlatList\r\n                    keyExtractor={(item, index) => item.id.toString()}  //Need to check which key!!!\r\n                    data={docsData}\r\n                    renderItem={renderItem}\r\n                    numColumns={1}\r\n                />\r\n            </Block>\r\n        </Block>\r\n    );\r\n}\r\n\r\nexport default MyDocsView;\r\n"]},"metadata":{},"sourceType":"module"}