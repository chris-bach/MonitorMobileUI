{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\ReactNative\\\\MonitorMobileUI\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport { Block, GalioProvider } from 'galio-framework';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { enableScreens } from 'react-native-screens';\nenableScreens();\nimport Screens from \"./navigation/Screens\";\nimport MonitorScreens from \"./navigation/MonitorScreens\";\nimport { Images, articles, argonTheme } from \"./constants\";\nvar assetImages = [Images.Onboarding, Images.LogoOnboarding, Images.Logo, Images.Pro, Images.ArgonLogo, Images.iOSLogo, Images.androidLogo];\narticles.map(function (article) {\n  return assetImages.push(article.image);\n});\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoadingComplete: false,\n      fontLoaded: false\n    };\n\n    _this._loadResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Promise.all(_toConsumableArray(cacheImages(assetImages))));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this._handleLoadingError = function (error) {\n      console.warn(error);\n    };\n\n    _this._handleFinishLoading = function () {\n      if (_this.state.fontLoaded) {\n        _this.setState({\n          isLoadingComplete: true\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              Font.loadAsync({\n                'open-sans-regular': require(\"./assets/font/OpenSans-Regular.ttf\"),\n                'open-sans-light': require(\"./assets/font/OpenSans-Light.ttf\"),\n                'open-sans-bold': require(\"./assets/font/OpenSans-Bold.ttf\")\n              });\n              this.setState({\n                fontLoaded: true\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isLoadingComplete) {\n        return React.createElement(AppLoading, {\n          startAsync: this._loadResourcesAsync,\n          onError: this._handleLoadingError,\n          onFinish: this._handleFinishLoading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 9\n          }\n        });\n      } else {\n        return React.createElement(NavigationContainer, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 9\n          }\n        }, React.createElement(GalioProvider, {\n          theme: argonTheme,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }\n        }, React.createElement(Block, {\n          flex: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }\n        }, React.createElement(MonitorScreens, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }\n        }))));\n      }\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport { App as default };","map":{"version":3,"sources":["C:/ReactNative/MonitorMobileUI/App.js"],"names":["React","AppLoading","Font","Asset","Block","GalioProvider","NavigationContainer","enableScreens","Screens","MonitorScreens","Images","articles","argonTheme","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","App","state","isLoadingComplete","fontLoaded","_loadResourcesAsync","Promise","all","_handleLoadingError","error","console","warn","_handleFinishLoading","setState","loadAsync","require","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Image } from 'react-native';\r\nimport { AppLoading } from 'expo';\r\nimport * as Font from 'expo-font';\r\nimport { Asset } from 'expo-asset';\r\nimport { Block, GalioProvider } from 'galio-framework';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\n\r\n// Before rendering any navigation stack\r\nimport { enableScreens } from 'react-native-screens';\r\nenableScreens();\r\n\r\nimport Screens from './navigation/Screens';\r\nimport MonitorScreens from \"./navigation/MonitorScreens\";\r\nimport { Images, articles, argonTheme } from './constants';\r\n\r\n// cache app images\r\nconst assetImages = [\r\n  Images.Onboarding,\r\n  Images.LogoOnboarding,\r\n  Images.Logo,\r\n  Images.Pro,\r\n  Images.ArgonLogo,\r\n  Images.iOSLogo,\r\n  Images.androidLogo,\r\n];\r\n\r\n// cache product images\r\narticles.map(article => assetImages.push(article.image));\r\n\r\nfunction cacheImages(images) {\r\n  return images.map(image => {\r\n    if (typeof image === 'string') {\r\n      return Image.prefetch(image);\r\n    } else {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    }\r\n  });\r\n}\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    isLoadingComplete: false,\r\n    fontLoaded: false,\r\n  }\r\n\r\n  async componentDidMount() {\r\n    Font.loadAsync({\r\n      'open-sans-regular': require('./assets/font/OpenSans-Regular.ttf'),\r\n      'open-sans-light': require('./assets/font/OpenSans-Light.ttf'),\r\n      'open-sans-bold': require('./assets/font/OpenSans-Bold.ttf'),\r\n    });\r\n\r\n    this.setState({ fontLoaded: true });\r\n  }\r\n\r\n  render() {\r\n    if(!this.state.isLoadingComplete) {\r\n      return (\r\n        <AppLoading\r\n          startAsync={this._loadResourcesAsync}\r\n          onError={this._handleLoadingError}\r\n          onFinish={this._handleFinishLoading}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <NavigationContainer>\r\n          <GalioProvider theme={argonTheme}>\r\n            <Block flex>\r\n              <MonitorScreens />\r\n              {/*<Screens />*/}\r\n            </Block>\r\n          </GalioProvider>\r\n        </NavigationContainer>\r\n      );\r\n    }\r\n  }\r\n\r\n  _loadResourcesAsync = async () => {\r\n    return Promise.all([\r\n      ...cacheImages(assetImages),\r\n    ]);\r\n  };\r\n\r\n  _handleLoadingError = error => {\r\n    // In this case, you might want to report the error to your error\r\n    // reporting service, for example Sentry\r\n    console.warn(error);\r\n  };\r\n\r\n  _handleFinishLoading = () => {\r\n    if(this.state.fontLoaded) {\r\n      this.setState({ isLoadingComplete: true });\r\n    }\r\n  };\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}