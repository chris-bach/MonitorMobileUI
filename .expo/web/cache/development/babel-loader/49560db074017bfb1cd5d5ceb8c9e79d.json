{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\App.js\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Asset } from 'expo-asset';\nimport { Block, Text, GalioProvider } from 'galio-framework';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { LoginProvider } from \"./context/LogInContext\";\nimport { enableScreens } from 'react-native-screens';\nenableScreens();\nimport MonitorScreens from \"./navigation/MonitorScreens\";\nimport { Images, articles, argonTheme } from \"./constants\";\nimport { Button } from \"./components\";\nvar assetImages = [Images.Onboarding, Images.LogoOnboarding, Images.Logo, Images.Pro, Images.ArgonLogo, Images.iOSLogo, Images.androidLogo];\narticles.map(function (article) {\n  return assetImages.push(article.image);\n});\n\nfunction cacheImages(images) {\n  return images.map(function (image) {\n    if (typeof image === 'string') {\n      return Image.prefetch(image);\n    } else {\n      return Asset.fromModule(image).downloadAsync();\n    }\n  });\n}\n\nvar App = function App(props) {\n  var _useState = useState({\n    isLoadingComplete: false,\n    fontLoaded: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      appState = _useState2[0],\n      setAppState = _useState2[1];\n\n  var loadResourcesAsync = function loadResourcesAsync() {\n    return _regeneratorRuntime.async(function loadResourcesAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", Promise.all([].concat(_toConsumableArray(cacheImages(assetImages)), [fetchFonts()])));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleLoadingError = function handleLoadingError(error) {\n    console.warn(error);\n  };\n\n  var handleFinishLoading = function handleFinishLoading() {\n    if (appState.fontLoaded) {\n      setAppState({\n        isLoadingComplete: true\n      });\n    }\n  };\n\n  var fetchFonts = function fetchFonts() {\n    Font.loadAsync({\n      'open-sans-regular': require(\"./assets/font/OpenSans-Regular.ttf\"),\n      'open-sans-light': require(\"./assets/font/OpenSans-Light.ttf\"),\n      'open-sans-bold': require(\"./assets/font/OpenSans-Bold.ttf\")\n    });\n    setAppState({\n      fontLoaded: true\n    });\n  };\n\n  if (!appState.isLoadingComplete) {\n    return React.createElement(AppLoading, {\n      startAsync: loadResourcesAsync,\n      onError: handleLoadingError,\n      onFinish: handleFinishLoading,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    });\n  } else {\n    return React.createElement(LoginProvider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, React.createElement(NavigationContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }\n    }, React.createElement(GalioProvider, {\n      theme: argonTheme,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, React.createElement(Block, {\n      flex: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }, React.createElement(MonitorScreens, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    })))));\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/App.js"],"names":["React","useState","useEffect","useRef","AppLoading","Font","Asset","Block","Text","GalioProvider","NavigationContainer","LoginProvider","enableScreens","MonitorScreens","Images","articles","argonTheme","Button","assetImages","Onboarding","LogoOnboarding","Logo","Pro","ArgonLogo","iOSLogo","androidLogo","map","article","push","image","cacheImages","images","Image","prefetch","fromModule","downloadAsync","App","props","isLoadingComplete","fontLoaded","appState","setAppState","loadResourcesAsync","Promise","all","fetchFonts","handleLoadingError","error","console","warn","handleFinishLoading","loadAsync","require"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;;;;AAEA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,aAAtB,QAA2C,iBAA3C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAAQC,aAAR;AAGA,SAASC,aAAT,QAA8B,sBAA9B;AACAA,aAAa;AAEb,OAAOC,cAAP;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,UAA3B;AACA,SAASC,MAAT;AAQA,IAAMC,WAAW,GAAG,CAClBJ,MAAM,CAACK,UADW,EAElBL,MAAM,CAACM,cAFW,EAGlBN,MAAM,CAACO,IAHW,EAIlBP,MAAM,CAACQ,GAJW,EAKlBR,MAAM,CAACS,SALW,EAMlBT,MAAM,CAACU,OANW,EAOlBV,MAAM,CAACW,WAPW,CAApB;AAWAV,QAAQ,CAACW,GAAT,CAAa,UAAAC,OAAO;AAAA,SAAIT,WAAW,CAACU,IAAZ,CAAiBD,OAAO,CAACE,KAAzB,CAAJ;AAAA,CAApB;;AAOA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOA,MAAM,CAACL,GAAP,CAAW,UAAAG,KAAK,EAAI;AACzB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOG,KAAK,CAACC,QAAN,CAAeJ,KAAf,CAAP;AACD,KAFD,MAEO;AACL,aAAOvB,KAAK,CAAC4B,UAAN,CAAiBL,KAAjB,EAAwBM,aAAxB,EAAP;AACD;AACF,GANM,CAAP;AAOD;;AAED,IAAMC,GAAG,GAAG,SAANA,GAAM,CAAAC,KAAK,EAAI;AAAA,kBAEapC,QAAQ,CAAC;AACvCqC,IAAAA,iBAAiB,EAAE,KADoB;AAEvCC,IAAAA,UAAU,EAAE;AAF2B,GAAD,CAFrB;AAAA;AAAA,MAEZC,QAFY;AAAA,MAEFC,WAFE;;AAOnB,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,6CAClBC,OAAO,CAACC,GAAR,8BACFd,WAAW,CAACZ,WAAD,CADT,IACwB2B,UAAU,EADlC,GADkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAMA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK,EAAI;AAGlCC,IAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD,GAJD;;AAMA,MAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAGV,QAAQ,CAACD,UAAZ,EAAwB;AACtBE,MAAAA,WAAW,CAAC;AAAEH,QAAAA,iBAAiB,EAAE;AAArB,OAAD,CAAX;AACD;AACF,GAJD;;AAMA,MAAMO,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBxC,IAAAA,IAAI,CAAC8C,SAAL,CAAe;AACb,2BAAqBC,OAAO,sCADf;AAEb,yBAAmBA,OAAO,oCAFb;AAGb,wBAAkBA,OAAO;AAHZ,KAAf;AAKAX,IAAAA,WAAW,CAAC;AAAEF,MAAAA,UAAU,EAAE;AAAd,KAAD,CAAX;AACD,GAPD;;AAcA,MAAG,CAACC,QAAQ,CAACF,iBAAb,EAAgC;AAC5B,WACE,oBAAC,UAAD;AACE,MAAA,UAAU,EAAEI,kBADd;AAEE,MAAA,OAAO,EAAEI,kBAFX;AAGE,MAAA,QAAQ,EAAEI,mBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GARH,MAQS;AACL,WACE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAElC,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CADF,CADF;AAWD;AACJ,CA5DD;;AA8DA,eAAeoB,GAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Image, View, Platform } from 'react-native';\r\nimport { AppLoading } from 'expo';\r\nimport * as Font from 'expo-font';\r\nimport { Asset } from 'expo-asset';\r\nimport { Block, Text, GalioProvider } from 'galio-framework';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport {LoginProvider} from \"./context/LogInContext\";\r\n\r\n// Before rendering any navigation stack\r\nimport { enableScreens } from 'react-native-screens';\r\nenableScreens();\r\n\r\nimport MonitorScreens from \"./navigation/MonitorScreens\";\r\nimport { Images, articles, argonTheme } from './constants';\r\nimport { Button } from \"./components\";\r\n\r\n/**\r\n * @author CreativeTIM, Manik Bagga, Matt Belgre, Chris Bautista\r\n * @description This file is the entry point of the app.\r\n */\r\n\r\n// cache app images\r\nconst assetImages = [\r\n  Images.Onboarding,\r\n  Images.LogoOnboarding,\r\n  Images.Logo,\r\n  Images.Pro,\r\n  Images.ArgonLogo,\r\n  Images.iOSLogo,\r\n  Images.androidLogo,\r\n];\r\n\r\n// cache product images\r\narticles.map(article => assetImages.push(article.image));\r\n\r\n/**\r\n * @author CreativeTIM\r\n * @description The following functions begin to load the app's assets\r\n */\r\n\r\nfunction cacheImages(images) {\r\n  return images.map(image => {\r\n    if (typeof image === 'string') {\r\n      return Image.prefetch(image);\r\n    } else {\r\n      return Asset.fromModule(image).downloadAsync();\r\n    }\r\n  });\r\n}\r\n\r\nconst App = props => {\r\n\r\n  const [appState, setAppState] = useState({\r\n    isLoadingComplete: false,\r\n    fontLoaded: false,\r\n  });\r\n\r\n  const loadResourcesAsync = async () => {\r\n    return Promise.all([\r\n      ...cacheImages(assetImages), fetchFonts()\r\n    ]);\r\n  };\r\n\r\n  const handleLoadingError = error => {\r\n    // In this case, you might want to report the error to your error\r\n    // reporting service, for example Sentry\r\n    console.warn(error);\r\n  };\r\n\r\n  const handleFinishLoading = () => {\r\n    if(appState.fontLoaded) {\r\n      setAppState({ isLoadingComplete: true });\r\n    }\r\n  };\r\n\r\n  const fetchFonts = () => {\r\n    Font.loadAsync({\r\n      'open-sans-regular': require('./assets/font/OpenSans-Regular.ttf'),\r\n      'open-sans-light': require('./assets/font/OpenSans-Light.ttf'),\r\n      'open-sans-bold': require('./assets/font/OpenSans-Bold.ttf'),\r\n    });\r\n    setAppState({ fontLoaded: true });\r\n  }\r\n\r\n  /**\r\n   * @author CreativeTIM, Manik Bagga, Chris Bautista\r\n   * @description The following functions then set up the context, navigation, then renders the splash and login screen.\r\n   */\r\n\r\n  if(!appState.isLoadingComplete) {\r\n      return (\r\n        <AppLoading\r\n          startAsync={loadResourcesAsync}\r\n          onError={handleLoadingError}\r\n          onFinish={handleFinishLoading}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <LoginProvider>\r\n          <NavigationContainer>\r\n            <GalioProvider theme={argonTheme}>\r\n              <Block flex>\r\n                <MonitorScreens />\r\n              </Block>\r\n            </GalioProvider>\r\n          </NavigationContainer>\r\n        </LoginProvider>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}