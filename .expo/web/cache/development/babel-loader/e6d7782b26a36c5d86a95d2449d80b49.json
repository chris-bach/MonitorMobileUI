{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\MonitorScreens\\\\ViewJobEquipment.js\";\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\nimport { argonTheme, tabs } from \"../constants\";\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width;\n\nimport styles from \"../constants/ScreenTheme\";\nimport { LogInContext } from \"../context/LogInContext\";\nimport { getJobsDetailsByJobId } from \"../Services/JobService\";\nimport ViewEquipmentDetailsTile from \"../components/ViewEquipmentDetailsTile\";\n\nvar ViewJobEquipment = function ViewJobEquipment(props) {\n  var _useContext = useContext(LogInContext),\n      userInfo = _useContext.userInfo;\n\n  var _useContext2 = useContext(LogInContext),\n      userOrganisation = _useContext2.userOrganisation;\n\n  var userId = userInfo.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      equipmentDetails = _useState2[0],\n      setEquipmentDetails = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataEquipment = _useState4[0],\n      setDataEquipment = _useState4[1];\n\n  var jobIdentifier = props.route.params.params.jobIdentifier;\n  var jobId = props.route.params.params.jobId;\n  var jobName = props.route.params.params.jobName;\n  var address = props.route.params.params.address;\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  useEffect(function () {\n    getJobsDetailsByJobId(jobId, userId).then(function (response) {\n      var equipmentList = [];\n      response.data.equipmentDetails.forEach(function (object) {\n        equipmentList.push(object);\n      });\n      setEquipmentDetails(equipmentList);\n    }).catch(function (error) {\n      console.log(\"useEffect catch: \", error);\n    });\n  }, []);\n  useEffect(function () {\n    var tableData = [];\n    equipmentDetails.forEach(function (eq, key) {\n      var equipmentInfo = {\n        id: key,\n        description: eq.equipment.description,\n        equipmentId: eq.equipment.equipmentId,\n        equipmentName: eq.equipment.equipmentName,\n        manufacturer: eq.equipment.manufacturer,\n        model: eq.equipment.model,\n        documents: eq.equipmentDocuments,\n        currentState: eq.equipmentMonitor.currentState,\n        monitorName: eq.equipmentMonitor.monitorName,\n        equipmentMonitorId: eq.equipmentMonitor.equipmentMonitorId,\n        flags: eq.equipmentMonitor.flags,\n        ipAddress: eq.equipmentMonitor.ipAddress,\n        status: eq.equipmentMonitor.status,\n        breakdowns: eq.equipmentMonitor.breakdowns\n      };\n      tableData.push(equipmentInfo);\n    });\n    setDataEquipment(tableData);\n  }, [equipmentDetails]);\n\n  var renderEquipment = function renderEquipment(equipmentData) {\n    return React.createElement(ViewEquipmentDetailsTile, {\n      monitorName: equipmentData.item.monitorName,\n      equipmentMonitorId: equipmentData.item.equipmentMonitorId,\n      description: equipmentData.item.description,\n      equipmentName: equipmentData.item.equipmentName,\n      manufacturer: equipmentData.item.manufacturer,\n      model: equipmentData.item.model,\n      currentState: equipmentData.item.currentState,\n      status: equipmentData.item.status,\n      breakdowns: equipmentData.item.breakdowns,\n      onSelect: function onSelect() {\n        props.navigation.navigate('View Equipment Status', {\n          params: {\n            monitorName: equipmentData.item.monitorName,\n            equipmentMonitorId: equipmentData.item.equipmentMonitorId,\n            equipmentName: equipmentData.item.equipmentName,\n            description: equipmentData.item.description,\n            equipmentId: equipmentData.item.equipmentId,\n            currentState: equipmentData.item.currentState\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return React.createElement(Block, {\n    flex: true,\n    style: styles.group,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, React.createElement(Block, {\n    flex: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, jobName), React.createElement(Text, {\n    style: styles.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, address), React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id.toString();\n    },\n    data: dataEquipment,\n    renderItem: renderEquipment,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ViewJobEquipment;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/MonitorScreens/ViewJobEquipment.js"],"names":["React","useEffect","useState","useContext","Block","Text","Button","GaButton","theme","argonTheme","tabs","Select","Icon","Input","Header","Switch","Dimensions","get","width","styles","LogInContext","getJobsDetailsByJobId","ViewEquipmentDetailsTile","ViewJobEquipment","props","userInfo","userOrganisation","userId","id","equipmentDetails","setEquipmentDetails","dataEquipment","setDataEquipment","jobIdentifier","route","params","jobId","jobName","address","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","then","response","equipmentList","data","forEach","object","push","catch","error","console","log","tableData","eq","key","equipmentInfo","description","equipment","equipmentId","equipmentName","manufacturer","model","documents","equipmentDocuments","currentState","equipmentMonitor","monitorName","equipmentMonitorId","flags","ipAddress","status","breakdowns","renderEquipment","equipmentData","item","navigation","navigate","group","title","heading","index","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from \"react\";\r\nimport {\r\n    ScrollView,\r\n    View,\r\n    FlatList,\r\n    StyleSheet,\r\n    Dimensions,\r\n    TouchableOpacity,\r\n    TouchableNativeFeedback,\r\n    Alert, Platform\r\n} from \"react-native\";\r\n// Galio components\r\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\r\n// Argon themed components\r\nimport { argonTheme, tabs } from \"../constants\";\r\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\r\n\r\nconst { width } = Dimensions.get(\"screen\");\r\n\r\nimport styles from \"../constants/ScreenTheme\";\r\nimport {LogInContext} from \"../context/LogInContext\";\r\n\r\nimport {getJobsDetailsByJobId} from \"../Services/JobService\";\r\nimport ViewEquipmentDetailsTile from \"../components/ViewEquipmentDetailsTile\";\r\n\r\n/**\r\n * @author Chris Bautista\r\n * @description This component gets the equipment data from the server and renders the flatlist using ViewEquipmentDetailsTile\r\n */\r\nconst ViewJobEquipment = props => {\r\n    // const userId = 1;\r\n\r\n    const {userInfo} = useContext(LogInContext);\r\n    const {userOrganisation} = useContext(LogInContext);\r\n\r\n    const userId = userInfo.id;\r\n\r\n    const [equipmentDetails, setEquipmentDetails] = useState([]);\r\n    const [dataEquipment, setDataEquipment] = useState([]);\r\n\r\n    const jobIdentifier = props.route.params.params.jobIdentifier;\r\n    const jobId = props.route.params.params.jobId;\r\n    const jobName = props.route.params.params.jobName;\r\n    const address = props.route.params.params.address;\r\n\r\n    let TouchableCmp = TouchableOpacity;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= 21) {\r\n        TouchableCmp = TouchableNativeFeedback; //ripple effect\r\n    }\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The following useEffects get the equipment details of the currently logged in user's job from the server\r\n     * and then pushes into state rendered by the flatlist\r\n     */\r\n    useEffect(() => {\r\n            getJobsDetailsByJobId(jobId,userId)\r\n                .then((response) => {\r\n                    const equipmentList = []\r\n                    response.data.equipmentDetails.forEach(object => {\r\n                        equipmentList.push(object)\r\n                    })\r\n                    setEquipmentDetails(equipmentList);\r\n                }).catch(error => {\r\n                console.log(\"useEffect catch: \", error)\r\n            })\r\n        },\r\n        []);\r\n\r\n    useEffect(() => {\r\n        const tableData = [];\r\n        equipmentDetails.forEach((eq, key) => {\r\n            let equipmentInfo = {\r\n                id: key,\r\n                description: eq.equipment.description,\r\n                equipmentId: eq.equipment.equipmentId,\r\n                equipmentName: eq.equipment.equipmentName,\r\n                manufacturer: eq.equipment.manufacturer,\r\n                model: eq.equipment.model,\r\n                documents: eq.equipmentDocuments,\r\n                currentState: eq.equipmentMonitor.currentState,\r\n                monitorName: eq.equipmentMonitor.monitorName,\r\n                equipmentMonitorId: eq.equipmentMonitor.equipmentMonitorId,\r\n                flags: eq.equipmentMonitor.flags,\r\n                ipAddress: eq.equipmentMonitor.ipAddress,\r\n                status: eq.equipmentMonitor.status,\r\n                breakdowns: eq.equipmentMonitor.breakdowns\r\n                // end: job.end,\r\n                // jobIdentifier: job.jobIdentifier,\r\n            };\r\n            tableData.push(equipmentInfo);\r\n        })\r\n        setDataEquipment(tableData);\r\n    }, [equipmentDetails]);\r\n\r\n    /**\r\n     * @author Chris Bautista\r\n     * @description Renders the jobs flatlist styled by ViewEquipmentDetailsTile\r\n     */\r\n    const renderEquipment = equipmentData => {\r\n        return (\r\n            <ViewEquipmentDetailsTile\r\n                monitorName={equipmentData.item.monitorName}\r\n                equipmentMonitorId={equipmentData.item.equipmentMonitorId}\r\n                description={equipmentData.item.description}\r\n                // equipmentId={equipmentData.item.equipmentId}\r\n                equipmentName={equipmentData.item.equipmentName}\r\n                manufacturer={equipmentData.item.manufacturer}\r\n                model={equipmentData.item.model}\r\n                currentState={equipmentData.item.currentState}\r\n                // flags={equipmentData.item.flags}\r\n                // ipAddress={equipmentData.item.ipAddress}\r\n                status={equipmentData.item.status}\r\n                breakdowns={equipmentData.item.breakdowns}\r\n                onSelect={() => {\r\n                    props.navigation.navigate('View Equipment Status',\r\n                        {\r\n                            params: {\r\n                                monitorName: equipmentData.item.monitorName,\r\n                                equipmentMonitorId: equipmentData.item.equipmentMonitorId,\r\n                                equipmentName: equipmentData.item.equipmentName,\r\n                                description: equipmentData.item.description,\r\n                                equipmentId: equipmentData.item.equipmentId,\r\n                                currentState: equipmentData.item.currentState,\r\n                            }\r\n                        });\r\n\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    /**\r\n     * @author Chris Bautista\r\n     * @description Renders the job's equipment list using the renderEquipment function above\r\n     */\r\n    return (\r\n        <Block flex style={styles.group}>\r\n            <Block flex>\r\n                <Text style={styles.title}>{jobName}</Text>\r\n                <Text style={styles.heading}>{address}</Text>\r\n                {/*<Text>{jobId}</Text>*/}\r\n                {/*<Text>{jobIdentifier}</Text>*/}\r\n                <FlatList\r\n                    keyExtractor={(item, index) => item.id.toString()} //Need to check which key!!!\r\n                    data={dataEquipment}\r\n                    renderItem={renderEquipment}\r\n                    numColumns={1}\r\n                />\r\n            </Block>\r\n        </Block>\r\n    );\r\n}\r\n\r\nexport default ViewJobEquipment;\r\n"]},"metadata":{},"sourceType":"module"}