{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\MonitorScreens\\\\ViewEquipmentStatus.js\";\n\nimport React, { useEffect, useState } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\nimport { Images, argonTheme, tabs } from \"../constants\";\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width;\n\nimport styles from \"../constants/ScreenTheme\";\nimport ViewBreakdownsTile from \"../components/ViewBreakdownsTile\";\nimport { getAllByEquipmentMonitorId, getStatusById } from \"../Services/EquipmentService\";\nimport axios from 'axios';\n\nvar ViewEquipmentStatus = function ViewEquipmentStatus(props) {\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      breakdownDetails = _useState2[0],\n      setBreakdownDetails = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      dataBreakdown = _useState4[0],\n      setDataBreakdown = _useState4[1];\n\n  var monitorName = props.route.params.params.monitorName;\n  var equipmentMonitorId = props.route.params.params.equipmentMonitorId;\n  var equipmentName = props.route.params.params.equipmentName;\n  var description = props.route.params.params.description;\n  var equipmentId = props.route.params.params.equipmentId;\n  var currentStateInitial = props.route.params.params.currentState;\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      image = _useState6[0],\n      setImage = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      monitor = _useState8[0],\n      setMonitor = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      counter = _useState10[0],\n      setCounter = _useState10[1];\n\n  var _useState11 = useState(currentStateInitial),\n      _useState12 = _slicedToArray(_useState11, 2),\n      currentState = _useState12[0],\n      setCurrentState = _useState12[1];\n\n  useEffect(function () {\n    getAllByEquipmentMonitorId(equipmentMonitorId).then(function (response) {\n      var breakdownList = [];\n      response.data.forEach(function (object) {\n        breakdownList.push(object);\n      });\n      setBreakdownDetails(breakdownList);\n    }).catch(function (error) {\n      console.log(\"useEffect catch: \", error);\n    });\n  }, []);\n  useEffect(function () {\n    var tableData = [];\n    breakdownDetails.forEach(function (br, key) {\n      var breakdownInfo = {\n        id: key,\n        breakdownId: br.breakdownId,\n        faultCode: br.faultCode,\n        recentState: br.recentState,\n        faultCause: br.faultCause,\n        breakdownTime: br.breakdownTime\n      };\n      tableData.push(breakdownInfo);\n    });\n    setDataBreakdown(tableData);\n  }, [breakdownDetails]);\n  useEffect(function () {\n    var timeout = setTimeout(function () {\n      setCounter(counter + 1);\n    }, 1000);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [counter]);\n  useEffect(function () {\n    getStatusById(equipmentMonitorId).then(function (res) {\n      setMonitor(res.data);\n      setImage(getLiftState(res.data.currentState));\n    });\n  }, [counter]);\n\n  var getLiftState = function getLiftState(state) {\n    switch (state) {\n      case \"Going up\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftgoingup,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"Going down\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftgoingdown,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"Doors opening, going up\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftopenclose,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"Doors Closing, going up\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftopenclose,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"Doors opening, going down\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftopenclose,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"Doors Closing, going down\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftopenclose,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"FAULT\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.lifterror,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 21\n            }\n          });\n        }\n\n      case \"PARKED\":\n        {\n          setCurrentState(state);\n          return React.createElement(Image, {\n            source: Images.liftparked,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }\n          });\n        }\n\n      default:\n        {\n          return React.createElement(\"h5\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 21\n            }\n          }, \"Lift data currently available...\");\n        }\n    }\n  };\n\n  var renderBreakdowns = function renderBreakdowns(breakdownData) {\n    return React.createElement(ViewBreakdownsTile, {\n      breakdownId: breakdownData.item.breakdownId,\n      breakdownTime: breakdownData.item.breakdownTime,\n      faultCause: breakdownData.item.faultCause,\n      faultCode: breakdownData.item.faultCode,\n      recentState: breakdownData.item.recentState,\n      onSelect: function onSelect() {},\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return React.createElement(Block, {\n    flex: true,\n    style: styles.group,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 9\n    }\n  }, React.createElement(Block, {\n    flex: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, monitorName), React.createElement(Text, {\n    style: styles.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, description), React.createElement(Text, {\n    style: styles.heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 17\n    }\n  }, \"Current State: \", currentState), React.createElement(Block, {\n    middle: true,\n    style: {\n      marginTop: 15,\n      marginBottom: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }\n  }, React.createElement(Block, {\n    style: styles.divider,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 21\n    }\n  })), React.createElement(Block, {\n    style: styles.group,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 17\n    }\n  }, image), React.createElement(Block, {\n    middle: true,\n    style: {\n      marginTop: 15,\n      marginBottom: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, React.createElement(Block, {\n    style: styles.divider,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 21\n    }\n  })), React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, \"Recent Breakdowns: \"), React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id.toString();\n    },\n    data: dataBreakdown,\n    renderItem: renderBreakdowns,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ViewEquipmentStatus;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/MonitorScreens/ViewEquipmentStatus.js"],"names":["React","useEffect","useState","Block","Text","Button","GaButton","theme","Images","argonTheme","tabs","Select","Icon","Input","Header","Switch","Dimensions","get","width","styles","ViewBreakdownsTile","getAllByEquipmentMonitorId","getStatusById","axios","ViewEquipmentStatus","props","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","breakdownDetails","setBreakdownDetails","dataBreakdown","setDataBreakdown","monitorName","route","params","equipmentMonitorId","equipmentName","description","equipmentId","currentStateInitial","currentState","image","setImage","monitor","setMonitor","counter","setCounter","setCurrentState","then","response","breakdownList","data","forEach","object","push","catch","error","console","log","tableData","br","key","breakdownInfo","id","breakdownId","faultCode","recentState","faultCause","breakdownTime","timeout","setTimeout","clearTimeout","res","getLiftState","state","liftgoingup","liftgoingdown","liftopenclose","lifterror","liftparked","renderBreakdowns","breakdownData","item","group","title","heading","marginTop","marginBottom","divider","index","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport {\r\n    Image,\r\n    ScrollView,\r\n    View,\r\n    FlatList,\r\n    StyleSheet,\r\n    Dimensions,\r\n    TouchableOpacity,\r\n    TouchableNativeFeedback,\r\n    Alert, Platform\r\n} from \"react-native\";\r\n// Galio components\r\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\r\n// Argon themed components\r\nimport {Images, argonTheme, tabs } from \"../constants\";\r\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\r\n\r\nconst { width } = Dimensions.get(\"screen\");\r\n\r\nimport styles from \"../constants/ScreenTheme\";\r\n\r\nimport ViewBreakdownsTile from \"../components/ViewBreakdownsTile\";\r\nimport {getAllByEquipmentMonitorId, getStatusById} from \"../Services/EquipmentService\";\r\nimport axios from 'axios';\r\n\r\n/**\r\n * @author Matt Belgre, Chris Bautista\r\n * @description This component displays the current status of the equipment (as reported by the IoT device)\r\n */\r\nconst ViewEquipmentStatus = props => {\r\n\r\n    let TouchableCmp = TouchableOpacity;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= 21) {\r\n        TouchableCmp = TouchableNativeFeedback; //ripple effect\r\n    }\r\n\r\n    const [breakdownDetails, setBreakdownDetails] = useState([]);\r\n    const [dataBreakdown, setDataBreakdown] = useState([]);\r\n\r\n    const monitorName = props.route.params.params.monitorName;\r\n    const equipmentMonitorId = props.route.params.params.equipmentMonitorId;\r\n    const equipmentName = props.route.params.params.equipmentName;\r\n    const description = props.route.params.params.description;\r\n    const equipmentId = props.route.params.params.equipmentId;\r\n    const currentStateInitial = props.route.params.params.currentState;\r\n\r\n    const [image, setImage] = useState();\r\n    const [monitor, setMonitor] = useState();\r\n    const [counter, setCounter] = useState(0);\r\n    const [currentState, setCurrentState] = useState(currentStateInitial);\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The next 2 useEffects get the breakdown list from the server and pushes to state\r\n     */\r\n    useEffect(() => {\r\n            getAllByEquipmentMonitorId(equipmentMonitorId)\r\n                .then((response) => {\r\n                    const breakdownList = []\r\n                    response.data.forEach(object => {\r\n                        breakdownList.push(object)\r\n                    })\r\n                    setBreakdownDetails(breakdownList);\r\n                }).catch(error => {\r\n                console.log(\"useEffect catch: \", error);\r\n            })\r\n        },\r\n        []);\r\n\r\n    useEffect(() => {\r\n        const tableData = [];\r\n        breakdownDetails.forEach((br, key) => {\r\n            let breakdownInfo = {\r\n                id: key,\r\n                breakdownId: br.breakdownId,\r\n                faultCode: br.faultCode,\r\n                recentState: br.recentState,\r\n                faultCause: br.faultCause,\r\n                breakdownTime: br.breakdownTime,\r\n            };\r\n            tableData.push(breakdownInfo);\r\n        })\r\n        setDataBreakdown(tableData);\r\n    }, [breakdownDetails]);\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The next 3 useEffects gets the equipment's status periodically from the server and updates the state and sets the image.\r\n     */\r\n    useEffect(() => {\r\n        const timeout = setTimeout(() => {\r\n            setCounter(counter + 1);\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [counter]);\r\n\r\n    useEffect(() => {\r\n        getStatusById(equipmentMonitorId)\r\n            .then(res => {\r\n                setMonitor(res.data);\r\n                setImage(getLiftState(res.data.currentState))\r\n            })\r\n    }, [counter])\r\n\r\n    const getLiftState = (state) => {\r\n        switch(state){\r\n            case \"Going up\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftgoingup}\r\n                    />\r\n                )\r\n            }\r\n            case \"Going down\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftgoingdown}\r\n                    />\r\n                )\r\n            }\r\n            case \"Doors opening, going up\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftopenclose}\r\n                    />\r\n                )\r\n            }\r\n            case \"Doors Closing, going up\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftopenclose}\r\n                    />\r\n                )\r\n            }\r\n            case \"Doors opening, going down\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftopenclose}\r\n                    />\r\n                )\r\n            }\r\n            case \"Doors Closing, going down\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftopenclose}\r\n                    />\r\n                )\r\n            }\r\n            case \"FAULT\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.lifterror}\r\n                    />\r\n                )\r\n            }\r\n            case \"PARKED\": {\r\n                setCurrentState(state);\r\n                return(\r\n                    <Image\r\n                        source={Images.liftparked}\r\n                    />\r\n                )\r\n            }\r\n            default :{\r\n                return (\r\n                    <h5>Lift data currently available...</h5>\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @author Chris Bautista\r\n     * @description This function uses the ViewBreakDownsTile to style the output of the flatlist\r\n     */\r\n    const renderBreakdowns = breakdownData => {\r\n        return (\r\n            <ViewBreakdownsTile\r\n                breakdownId={breakdownData.item.breakdownId}\r\n                breakdownTime={breakdownData.item.breakdownTime}\r\n                faultCause={breakdownData.item.faultCause}\r\n                faultCode={breakdownData.item.faultCode}\r\n                recentState={breakdownData.item.recentState}\r\n                onSelect={() => {\r\n                    // props.navigation.navigate({\r\n                    //     routeName: 'CategoryMeals',\r\n                    //     params: {\r\n                    //         docId: itemData.item.id\r\n                    //     }\r\n                    // });\r\n                    //alert(\"You clicked a breakdown id: \" + breakdownData.item.breakdownId)\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    /**\r\n     * @author Chris Bautista\r\n     * @description This shows the breakdown report using a flatlist that renders the data styled by RenderBreakdowns\r\n     */\r\n    return (\r\n        <Block flex style={styles.group}>\r\n            <Block flex>\r\n                <Text style={styles.title}>{monitorName}</Text>\r\n                <Text style={styles.heading}>{description}</Text>\r\n                <Text style={styles.heading}>Current State: {currentState}</Text>\r\n                <Block middle style={{ marginTop: 15, marginBottom: 15 }}>\r\n                    <Block style={styles.divider} />\r\n                </Block>\r\n                <Block style={styles.group}>{image}</Block>\r\n                <Block middle style={{ marginTop: 15, marginBottom: 15 }}>\r\n                    <Block style={styles.divider} />\r\n                </Block>\r\n                <Text style={styles.title}>Recent Breakdowns: </Text>\r\n                <FlatList\r\n                    keyExtractor={(item, index) => item.id.toString()} //Need to check which key!!!\r\n                    data={dataBreakdown}\r\n                    renderItem={renderBreakdowns}\r\n                    numColumns={1}\r\n                />\r\n            </Block>\r\n        </Block>\r\n    );\r\n}\r\n\r\nexport default ViewEquipmentStatus;\r\n"]},"metadata":{},"sourceType":"module"}