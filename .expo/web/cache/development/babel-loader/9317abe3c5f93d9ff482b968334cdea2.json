{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\MonitorScreens\\\\MyJobsView.js\";\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\nimport { argonTheme, tabs } from \"../constants\";\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width;\n\nimport styles from \"../constants/ScreenTheme\";\nimport { LogInContext } from \"../context/LogInContext\";\nimport { getJobsByUserId } from \"../Services/JobService\";\nimport ViewJobsTile from \"../components/ViewJobsTile\";\n\nvar MyJobsView = function MyJobsView(props) {\n  var _useContext = useContext(LogInContext),\n      userInfo = _useContext.userInfo;\n\n  var _useContext2 = useContext(LogInContext),\n      userOrganisation = _useContext2.userOrganisation;\n\n  var userId = userInfo.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      jobList = _useState2[0],\n      setJobList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  useEffect(function () {\n    getJobsByUserId(userId).then(function (response) {\n      var jobList = [];\n      response.data.forEach(function (object) {\n        jobList.push(object);\n      });\n      setJobList(jobList);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n  useEffect(function () {\n    var tableData = [];\n    jobList.forEach(function (job, key) {\n      var jobInfo = {\n        id: key,\n        jobId: job.jobId,\n        jobName: job.jobName,\n        address: job.address,\n        start: JSON.stringify(job.start[2]).concat(\"/\", JSON.stringify(job.start[1])).concat(\"/\", JSON.stringify(job.start[0])),\n        end: JSON.stringify(job.end[2]).concat(\"/\", JSON.stringify(job.end[1])).concat(\"/\", JSON.stringify(job.end[0])),\n        jobIdentifier: job.jobIdentifier,\n        latitude: job.latitude,\n        longitude: job.longitude,\n        firstName: job.manager.firstName,\n        lastName: job.manager.lastName,\n        email: job.manager.email\n      };\n      tableData.push(jobInfo);\n    });\n    setData(tableData);\n  }, [jobList]);\n\n  var renderItem = function renderItem(itemData) {\n    return React.createElement(ViewJobsTile, {\n      jobName: itemData.item.jobName,\n      address: itemData.item.address,\n      firstName: itemData.item.firstName,\n      lastName: itemData.item.lastName,\n      email: itemData.item.email,\n      startDate: itemData.item.start,\n      endDate: itemData.item.end,\n      latitude: itemData.item.latitude,\n      longitude: itemData.item.longitude,\n      jobId: itemData.item.jobId,\n      jobIdentifier: itemData.item.jobIdentifier,\n      onSelect: function onSelect() {\n        props.navigation.navigate('View Job Equipment', {\n          params: {\n            jobIdentifier: itemData.item.jobIdentifier,\n            address: itemData.item.address,\n            jobId: itemData.item.jobId,\n            jobName: itemData.item.jobName\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return React.createElement(Block, {\n    flex: true,\n    style: styles.group,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, React.createElement(Block, {\n    flex: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, \"My Jobs\"), React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id.toString();\n    },\n    data: data,\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default MyJobsView;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/MonitorScreens/MyJobsView.js"],"names":["React","useEffect","useState","useContext","Block","Text","Button","GaButton","theme","argonTheme","tabs","Select","Icon","Input","Header","Switch","Dimensions","get","width","styles","LogInContext","getJobsByUserId","ViewJobsTile","MyJobsView","props","userInfo","userOrganisation","userId","id","jobList","setJobList","data","setData","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","then","response","forEach","object","push","catch","error","console","log","tableData","job","key","jobInfo","jobId","jobName","address","start","JSON","stringify","concat","end","jobIdentifier","latitude","longitude","firstName","manager","lastName","email","renderItem","itemData","item","navigation","navigate","params","group","title","index","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from \"react\";\r\nimport {\r\n    ScrollView,\r\n    View,\r\n    FlatList,\r\n    StyleSheet,\r\n    Dimensions,\r\n    TouchableOpacity,\r\n    TouchableNativeFeedback,\r\n    Alert, Platform\r\n} from \"react-native\";\r\n// Galio components\r\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\r\n// Argon themed components\r\nimport { argonTheme, tabs } from \"../constants\";\r\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\r\n\r\nconst { width } = Dimensions.get(\"screen\");\r\n\r\nimport styles from \"../constants/ScreenTheme\";\r\nimport {LogInContext} from \"../context/LogInContext\";\r\n\r\nimport {getJobsByUserId} from \"../Services/JobService\";\r\nimport ViewJobsTile from \"../components/ViewJobsTile\";\r\n\r\n/**\r\n * @author Chris Bautista\r\n * @description This component gets the jobs data from the server and renders the flatlist using ViewJobsTile\r\n */\r\nconst MyJobsView = props => {\r\n    // const userId = 1;\r\n    const {userInfo} = useContext(LogInContext);\r\n    const {userOrganisation} = useContext(LogInContext);\r\n\r\n    const userId = userInfo.id;\r\n\r\n    const [jobList, setJobList] = useState([]);\r\n    const [data, setData] = useState([]);\r\n\r\n    let TouchableCmp = TouchableOpacity;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= 21) {\r\n        TouchableCmp = TouchableNativeFeedback; //ripple effect\r\n    }\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The following useEffects get the jobs of the currently logged in user from the server\r\n     * and then pushes into state rendered by the flatlist\r\n     */\r\n    useEffect(() => {\r\n            getJobsByUserId(userId)\r\n                .then((response) => {\r\n                    const jobList = []\r\n                    response.data.forEach(object => {\r\n                        jobList.push(object)\r\n                        // setIsLoading(true)\r\n                    })\r\n                    setJobList(jobList);\r\n                }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        },\r\n        []);\r\n\r\n    useEffect(() => {\r\n        const tableData = [];\r\n        jobList.forEach((job, key) => {\r\n            let jobInfo = {\r\n                id: key,\r\n                jobId:job.jobId,\r\n                jobName:job.jobName,\r\n                address: job.address,\r\n                start: JSON.stringify(job.start[2]).concat(\"/\", JSON.stringify(job.start[1])).concat(\"/\", JSON.stringify(job.start[0])),\r\n                end: JSON.stringify(job.end[2]).concat(\"/\", JSON.stringify(job.end[1])).concat(\"/\", JSON.stringify(job.end[0])),\r\n                jobIdentifier: job.jobIdentifier,\r\n                latitude: job.latitude,\r\n                longitude: job.longitude,\r\n                firstName: job.manager.firstName,\r\n                lastName: job.manager.lastName,\r\n                email: job.manager.email,\r\n            };\r\n            tableData.push(jobInfo);\r\n        })\r\n        setData(tableData);\r\n    }, [jobList]);\r\n\r\n    /**\r\n     * @author Chris Bautista\r\n     * @description Renders the jobs flatlist styled by ViewJobsTile\r\n     */\r\n    const renderItem = itemData => {\r\n        return (\r\n            <ViewJobsTile\r\n                jobName={itemData.item.jobName}\r\n                address={itemData.item.address}\r\n                firstName={itemData.item.firstName}\r\n                lastName={itemData.item.lastName}\r\n                email={itemData.item.email}\r\n                startDate={itemData.item.start}\r\n                endDate={itemData.item.end}\r\n                latitude={itemData.item.latitude}\r\n                longitude={itemData.item.longitude}\r\n                jobId={itemData.item.jobId}\r\n                jobIdentifier={itemData.item.jobIdentifier}\r\n                // onSelect={() => {\r\n                //     props.navigation.navigate('Job Details',\r\n                //         {\r\n                //             params: {\r\n                //                 jobIdentifier: itemData.item.jobIdentifier,\r\n                //                 address: itemData.item.address,\r\n                //                 jobId: itemData.item.jobId,\r\n                //                 jobName: itemData.item.jobName\r\n                //             }\r\n                //         });\r\n                // }}\r\n                onSelect={() => {\r\n                    props.navigation.navigate('View Job Equipment',\r\n                        {\r\n                            params: {\r\n                                jobIdentifier: itemData.item.jobIdentifier,\r\n                                address: itemData.item.address,\r\n                                jobId: itemData.item.jobId,\r\n                                jobName: itemData.item.jobName\r\n                            }\r\n                        });\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    /**\r\n     * @author Chris Bautista\r\n     * @description Renders the jobs using the renderItem function above\r\n     */\r\n    return (\r\n        <Block flex style={styles.group}>\r\n            <Block flex>\r\n                <Text style={styles.title}>My Jobs</Text>\r\n                <FlatList\r\n                    keyExtractor={(item, index) => item.id.toString()}  //Need to check which key!!!\r\n                    data={data}\r\n                    renderItem={renderItem}\r\n                    numColumns={1}\r\n                />\r\n            </Block>\r\n        </Block>\r\n    );\r\n}\r\n\r\nexport default MyJobsView;\r\n"]},"metadata":{},"sourceType":"module"}