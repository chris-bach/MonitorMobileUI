{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\components\\\\AuthInput.js\";\nimport React, { useState, useEffect, useContext, useRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { Input, Block, theme, Button, Text } from 'galio-framework';\nimport { argonTheme } from \"../constants\";\nimport axios from \"axios\";\nimport { LogInContext } from \"../context/LogInContext\";\nimport { MONITOR_URL } from \"../constants/MonitorConstants\";\nimport { login } from \"../Services/Auth\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    height = _Dimensions$get.height,\n    width = _Dimensions$get.width;\n\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: true,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\n\nfunction AuthInput(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      emailValid = _useState6[0],\n      setEmailValid = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      password = _useState8[0],\n      setPassword = _useState8[1];\n\n  var _useState9 = useState(true),\n      _useState10 = _slicedToArray(_useState9, 2),\n      errorState = _useState10[0],\n      setError = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      errorText = _useState12[0],\n      setErrorText = _useState12[1];\n\n  var _useState13 = useState(true),\n      _useState14 = _slicedToArray(_useState13, 2),\n      loggedIn = _useState14[0],\n      setLoggedIn = _useState14[1];\n\n  var _useContext = useContext(LogInContext),\n      setUserInfo = _useContext.setUserInfo,\n      setUserRoles = _useContext.setUserRoles,\n      setUserOrganisation = _useContext.setUserOrganisation,\n      setDirector = _useContext.setDirector,\n      setInactiveJobs = _useContext.setInactiveJobs,\n      setActiveJobs = _useContext.setActiveJobs,\n      setSubordinates = _useContext.setSubordinates;\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      expoPushToken = _useState16[0],\n      setExpoPushToken = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      notification = _useState18[0],\n      setNotification = _useState18[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n      console.log(\"From inside listener: \", notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(\"From inside response: \", response);\n    });\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener.current);\n      Notifications.removeNotificationSubscription(responseListener.current);\n    };\n  }, []);\n\n  function verifyEmail(input) {\n    var emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return emailRegex.test(input);\n  }\n\n  function changeEmailHandler(input) {\n    setEmail(input);\n\n    if (verifyEmail(input)) {\n      setEmailValid(true);\n    } else {\n      setEmailValid(false);\n    }\n  }\n\n  function changePasswordHandler(input) {\n    setPassword(input);\n  }\n\n  function errorHandling(error) {\n    setError(true);\n    console.log(error);\n  }\n\n  function logInHandler() {\n    var token, data, resp, user;\n    return _regeneratorRuntime.async(function logInHandler$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoading(true);\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(axios.post(MONITOR_URL + \"/api/user/authorise\", {\n              \"username\": email,\n              \"password\": password\n            }).then(function (res) {\n              AsyncStorage.setItem('Authorization', res.data.token);\n            }).catch(function (error) {\n              console.log(\"Interceptor error: \", error);\n            }));\n\n          case 3:\n            AsyncStorage.getItem('Authorization').then(function (res) {\n              token = res;\n            });\n            _context2.prev = 4;\n            changeEmailHandler(email);\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(axios.post(MONITOR_URL + \"/api/login\", {\n              deviceToken: expoPushToken,\n              deviceType: \"mobile\",\n              email: email,\n              password: password\n            }).then(function (response) {\n              data = response.data;\n              setLoading(false);\n            }).catch(function (response) {\n              setError(true);\n            }));\n\n          case 8:\n            resp = _context2.sent;\n            user = {\n              id: data.userId,\n              email: data.userEmail,\n              firstName: data.userFirstName,\n              lastName: data.userLastName\n            };\n            setUserInfo(user);\n            setUserRoles(data.assignedRoles);\n            setUserOrganisation(data.organisations[0]);\n            setDirector(data.directorData);\n            setInactiveJobs(data.inactiveJobs);\n            ;\n            setActiveJobs(data.activeJobs);\n            _context2.next = 19;\n            return _regeneratorRuntime.awrap(setSubordinates(data.subordinates));\n\n          case 19:\n            _context2.next = 21;\n            return _regeneratorRuntime.awrap(setLoggedIn(true));\n\n          case 21:\n            setError(false);\n            props.nav.navigate(\"App\");\n            _context2.next = 29;\n            break;\n\n          case 25:\n            _context2.prev = 25;\n            _context2.t0 = _context2[\"catch\"](4);\n            setError(true);\n            errorHandling(_context2.t0);\n\n          case 29:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[4, 25]], Promise);\n  }\n\n  return React.createElement(Block, {\n    safe: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, emailValid ? null : React.createElement(Text, {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 34\n    }\n  }, \" Please Enter Valid Email \"), errorState ? React.createElement(Text, {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 27\n    }\n  }, errorText) : null, React.createElement(Input, {\n    style: styles.input,\n    rounded: true,\n    onChangeText: setEmail,\n    value: email,\n    type: \"email-address\",\n    autoCapitalize: \"none\",\n    color: theme.COLORS.BLACK,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }), React.createElement(Input, {\n    style: styles.input,\n    rounded: true,\n    password: true,\n    viewPass: true,\n    onChangeText: changePasswordHandler,\n    value: password,\n    autoCapitalize: \"none\",\n    color: theme.COLORS.BLACK,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }), loading ? React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: \"black\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 24\n    }\n  }) : null, React.createElement(Button, {\n    shadowless: true,\n    style: styles.button,\n    color: argonTheme.COLORS.DEFAULT,\n    onPress: logInHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontFamily: 'open-sans-bold',\n      fontSize: 14\n    },\n    color: theme.COLORS.WHITE,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, \"LOGIN\")));\n}\n\nexport default AuthInput;\nvar styles = StyleSheet.create({\n  input: {\n    borderColor: \"#0b4870\",\n    marginTop: 10\n  },\n  button: {\n    width: width - theme.SIZES.BASE * 4,\n    height: theme.SIZES.BASE * 3,\n    shadowRadius: 0,\n    shadowOpacity: 0,\n    color: \"white\"\n  }\n});\n\nfunction sendPushNotification(expoPushToken) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: 'Original Title',\n            body: 'And here is the body!',\n            data: {\n              someData: 'goes here'\n            }\n          };\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context4.next = 20;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context4.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context4.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          _context4.next = 21;\n          break;\n\n        case 20:\n          alert('Must use physical device for Push Notifications');\n\n        case 21:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context4.abrupt(\"return\", token);\n\n        case 23:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/components/AuthInput.js"],"names":["React","useState","useEffect","useContext","useRef","Input","Block","theme","Button","Text","argonTheme","axios","LogInContext","MONITOR_URL","login","Dimensions","get","height","width","Constants","Notifications","AsyncStorage","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","AuthInput","props","loading","setLoading","email","setEmail","emailValid","setEmailValid","password","setPassword","errorState","setError","errorText","setErrorText","loggedIn","setLoggedIn","setUserInfo","setUserRoles","setUserOrganisation","setDirector","setInactiveJobs","setActiveJobs","setSubordinates","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","console","log","addNotificationResponseReceivedListener","response","removeNotificationSubscription","verifyEmail","input","emailRegex","test","changeEmailHandler","changePasswordHandler","errorHandling","error","logInHandler","post","res","setItem","data","catch","getItem","deviceToken","deviceType","resp","user","id","userId","userEmail","firstName","userFirstName","lastName","userLastName","assignedRoles","organisations","directorData","inactiveJobs","activeJobs","subordinates","nav","navigate","styles","COLORS","BLACK","button","DEFAULT","fontFamily","fontSize","WHITE","StyleSheet","create","borderColor","marginTop","SIZES","BASE","shadowRadius","shadowOpacity","color","sendPushNotification","message","to","sound","title","body","someData","fetch","method","headers","Accept","JSON","stringify","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useContext, useRef} from 'react'\r\nimport {StyleSheet, Dimensions, View, Platform, ActivityIndicator} from 'react-native'\r\nimport {Input, Block, theme, Button, Text} from 'galio-framework'\r\nimport {argonTheme} from \"../constants\";\r\nimport axios from \"axios\";\r\nimport {LogInContext} from \"../context/LogInContext\";\r\nimport {MONITOR_URL} from \"../constants/MonitorConstants\";\r\n\r\nimport {login} from \"../Services/Auth\";\r\n\r\nconst { height, width } = Dimensions.get(\"screen\");\r\n\r\nimport Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\n//import React, { useState, useEffect, useRef } from 'react';\r\n//import { Text, View, Button, Platform } from 'react-native';\r\nimport { AsyncStorage } from 'react-native';\r\n\r\n/**\r\n * @author Expo\r\n * @description Notifications handler\r\n */\r\nNotifications.setNotificationHandler({\r\n    handleNotification: async () => ({\r\n        shouldShowAlert: true,\r\n        shouldPlaySound: true,\r\n        shouldSetBadge: false,\r\n    }),\r\n});\r\n\r\n/**\r\n * @author Manik Bagga\r\n * @description This component renders and handles the form for logging in\r\n */\r\nfunction AuthInput(props){\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [email, setEmail] = useState('');\r\n    const [emailValid, setEmailValid] = useState(true)\r\n    const [password, setPassword] = useState(\"\");\r\n    const [errorState, setError] = useState(true);\r\n    const [errorText, setErrorText] = useState(\"\");\r\n    const [loggedIn, setLoggedIn] = useState(true)\r\n\r\n    const {setUserInfo, setUserRoles, setUserOrganisation, setDirector, setInactiveJobs, setActiveJobs, setSubordinates} = useContext(LogInContext);\r\n\r\n    const [expoPushToken, setExpoPushToken] = useState('');\r\n    const [notification, setNotification] = useState(false);\r\n    const notificationListener = useRef();\r\n    const responseListener = useRef();\r\n\r\n    /**\r\n     * @author Expo\r\n     * @description This useEffect handles token registration, and notification listener and response\r\n     */\r\n    useEffect(() => {\r\n        registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n        // This listener is fired whenever a notification is received while the app is foregrounded\r\n        notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n            setNotification(notification);\r\n            console.log(\"From inside listener: \", notification)\r\n        });\r\n\r\n        // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\r\n        responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n            console.log(\"From inside response: \", response);\r\n        });\r\n\r\n        return () => {\r\n            Notifications.removeNotificationSubscription(notificationListener.current);\r\n            Notifications.removeNotificationSubscription(responseListener.current);\r\n        };\r\n    }, []);\r\n\r\n\r\n    /**\r\n     * @author Manik Bagga\r\n     * @description The following functions handle login verification and error checkjing for the login page\r\n     */\r\n    function verifyEmail(input){\r\n        const emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        return emailRegex.test(input)\r\n    }\r\n\r\n    function changeEmailHandler(input){\r\n        setEmail(input);\r\n        if(verifyEmail(input)){\r\n            setEmailValid(true);\r\n        }\r\n        else{\r\n            setEmailValid(false)\r\n        }\r\n    }\r\n\r\n    function changePasswordHandler(input){\r\n        setPassword(input);\r\n    }\r\n\r\n    function errorHandling(error){\r\n        setError(true);\r\n        console.log(error);\r\n    }\r\n\r\n    /**\r\n     * @author Manik Bagga, Chris Bautista\r\n     * @description Attempts logging in to the server\r\n     */\r\n    async function logInHandler(){\r\n\r\n        setLoading(true);\r\n\r\n        await axios.post(`${MONITOR_URL}/api/user/authorise`,\r\n            {\r\n                \"username\":email,\r\n                \"password\":password,\r\n            }\r\n    ).then(res => {\r\n            AsyncStorage.setItem('Authorization', res.data.token)\r\n        }).catch((error)=>{\r\n            console.log(\"Interceptor error: \", error)\r\n        })\r\n\r\n        // AsyncStorage.getItem('Authorization')\r\n        //     .then((value) => {\r\n        //         const data = JSON.parse(value);\r\n        //         console.log('name is ', data.name);\r\n        //     });\r\n        let token;\r\n        AsyncStorage.getItem('Authorization').then((res)=>{\r\n            token = res;\r\n        });\r\n        try {\r\n            changeEmailHandler(email);\r\n            let data;\r\n\r\n            const resp = await axios.post(`${MONITOR_URL}/api/login`, {\r\n                deviceToken: expoPushToken,\r\n                // deviceToken: \"ExponentPushToken[-O-4OhDmX2gfqbJOP8Md5e]\",\r\n                deviceType: \"mobile\",\r\n                email: email,\r\n                password: password})\r\n                .then(response => {\r\n                    data = response.data;\r\n                    setLoading(false);\r\n                })\r\n                .catch(response => {\r\n                    setError(true);\r\n                })\r\n\r\n            const user = {\r\n                id: data.userId,\r\n                email: data.userEmail,\r\n                firstName: data.userFirstName,\r\n                lastName: data.userLastName\r\n            }\r\n\r\n            setUserInfo(user);\r\n            setUserRoles(data.assignedRoles);\r\n            setUserOrganisation(data.organisations[0]);\r\n            setDirector(data.directorData);\r\n            setInactiveJobs(data.inactiveJobs);;\r\n            setActiveJobs(data.activeJobs);\r\n            await setSubordinates(data.subordinates);\r\n            await setLoggedIn(true)\r\n            setError(false)\r\n            props.nav.navigate(\"App\")\r\n        }\r\n\r\n        catch(e){\r\n            setError(true)\r\n            errorHandling(e)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @author Manik Bagga, Chris Bautista\r\n     * @description Displays the form components for logging in\r\n     */\r\n    return(\r\n        <Block safe>\r\n            {emailValid ? null : <Text color=\"red\"> Please Enter Valid Email </Text>}\r\n            {errorState ? <Text color=\"red\" >{errorText}</Text> : null}\r\n            <Input style={styles.input} rounded onChangeText={setEmail} value={email} type=\"email-address\" autoCapitalize=\"none\" color={theme.COLORS.BLACK}/>\r\n            <Input style={styles.input} rounded password viewPass onChangeText={changePasswordHandler} value={password} autoCapitalize=\"none\" color={theme.COLORS.BLACK}/>\r\n            {loading ? <ActivityIndicator size=\"small\" color=\"black\"/> : null}\r\n            <Button\r\n                shadowless\r\n                style={styles.button}\r\n                color={argonTheme.COLORS.DEFAULT}\r\n                onPress={logInHandler}\r\n            >\r\n                <Text style={{ fontFamily: 'open-sans-bold', fontSize: 14 }} color={theme.COLORS.WHITE}>\r\n                    LOGIN\r\n                </Text>\r\n            </Button>\r\n        </Block>\r\n    )\r\n}\r\n\r\nexport default AuthInput;\r\n\r\nconst styles = StyleSheet.create({\r\n    input:{\r\n        borderColor: \"#0b4870\",\r\n        marginTop: 10\r\n\r\n    },\r\n    button:{\r\n        width: width - theme.SIZES.BASE * 4,\r\n        height: theme.SIZES.BASE * 3,\r\n        shadowRadius: 0,\r\n        shadowOpacity: 0,\r\n        color:\"white\",\r\n    }\r\n})\r\n\r\n/**\r\n * @author Expo\r\n * @description These functions handle token registration, and send and fetch of notifications\r\n */\r\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\r\nasync function sendPushNotification(expoPushToken) {\r\n    const message = {\r\n        to: expoPushToken,\r\n        sound: 'default',\r\n        title: 'Original Title',\r\n        body: 'And here is the body!',\r\n        data: { someData: 'goes here' },\r\n    };\r\n\r\n    await fetch('https://exp.host/--/api/v2/push/send', {\r\n        method: 'POST',\r\n        headers: {\r\n            Accept: 'application/json',\r\n            'Accept-encoding': 'gzip, deflate',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(message),\r\n    });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n    let token;\r\n    if (Constants.isDevice) {\r\n        const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n        let finalStatus = existingStatus;\r\n        if (existingStatus !== 'granted') {\r\n            const { status } = await Notifications.requestPermissionsAsync();\r\n            finalStatus = status;\r\n        }\r\n        if (finalStatus !== 'granted') {\r\n            alert('Failed to get push token for push notification!');\r\n            return;\r\n        }\r\n        token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    } else {\r\n        alert('Must use physical device for Push Notifications');\r\n    }\r\n\r\n    if (Platform.OS === 'android') {\r\n        Notifications.setNotificationChannelAsync('default', {\r\n            name: 'default',\r\n            importance: Notifications.AndroidImportance.MAX,\r\n            vibrationPattern: [0, 250, 250, 250],\r\n            lightColor: '#FF231F7C',\r\n        });\r\n    }\r\n\r\n    return token;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}