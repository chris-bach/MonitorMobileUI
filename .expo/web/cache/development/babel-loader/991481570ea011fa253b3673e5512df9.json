{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\MonitorScreens\\\\MonitorNotifications.js\";\n\nimport React, { useEffect, useState, useContext } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport { Block, Text } from \"galio-framework\";\nimport { Notification } from \"../components\";\nimport { argonTheme } from \"../constants\";\nimport { LogInContext } from \"../context/LogInContext\";\nimport { getNotificationsByUserId, markNotificationAsRead } from \"../Services/NotificationService\";\nimport ViewNotificationTile from \"../components/ViewNotificationTile\";\nimport ViewJobsTile from \"../components/ViewJobsTile\";\n\nvar MonitorNotifications = function MonitorNotifications(props) {\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  var _useContext = useContext(LogInContext),\n      userInfo = _useContext.userInfo;\n\n  var _useContext2 = useContext(LogInContext),\n      userOrganisation = _useContext2.userOrganisation;\n\n  var userId = userInfo.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      notifications = _useState2[0],\n      setNotifications = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      readCounter = _useState6[0],\n      setReadCounter = _useState6[1];\n\n  useEffect(function () {\n    getNotificationsByUserId(userId).then(function (response) {\n      var noteList = [];\n      response.data.forEach(function (object) {\n        noteList.push(object);\n      });\n      setNotifications(noteList);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, [userId]);\n  useEffect(function () {\n    getNotificationsByUserId(userId).then(function (response) {\n      var noteList = [];\n      response.data.forEach(function (object) {\n        noteList.push(object);\n      });\n      setNotifications(noteList);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, [readCounter]);\n  useEffect(function () {\n    var tableData = [];\n    notifications.forEach(function (notification, key) {\n      var notificationInfo = {\n        id: key,\n        notificationId: notification.notificationId,\n        address: notification.address,\n        deviceName: notification.deviceName,\n        faultCause: notification.faultCause,\n        faultCode: notification.faultCode,\n        jobName: notification.jobName,\n        lastState: notification.lastState,\n        read: notification.read,\n        breakdownTime: formatDateTime(notification.breakdownTime)\n      };\n      tableData.push(notificationInfo);\n    });\n    setData(tableData);\n  }, [notifications]);\n\n  var markAsRead = function markAsRead(id) {\n    markNotificationAsRead(id).then(function () {\n      var counter = readCounter + 1;\n      setReadCounter(counter);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n\n  var formatDateTime = function formatDateTime(date) {\n    var hour, minute, day, month;\n\n    if (date[3].length === 1) {\n      hour = \"0\" + date[3];\n    } else {\n      hour = date[3];\n    }\n\n    if (date[4].length === 1) {\n      minute = \"0\" + date[4];\n    } else {\n      minute = date[4];\n    }\n\n    if (date[2].length === 1) {\n      day = \"0\" + date[2];\n    } else {\n      day = date[2];\n    }\n\n    if (date[1].length === 1) {\n      month = \"0\" + date[1];\n    } else {\n      month = date[1];\n    }\n\n    return day + '/' + month + '/' + date[0] + '  ' + hour + ':' + minute;\n  };\n\n  var renderItem = function renderItem(itemData) {\n    return React.createElement(ViewNotificationTile, {\n      notificationId: itemData.item.notificationId,\n      address: itemData.item.address,\n      deviceName: itemData.item.deviceName,\n      faultCause: itemData.item.faultCause,\n      faultCode: itemData.item.faultCode,\n      jobName: itemData.item.jobName,\n      lastState: itemData.item.lastState,\n      read: itemData.item.read,\n      breakdownTime: itemData.item.breakdownTime,\n      onSelect: function onSelect() {\n        if (!itemData.item.read) {\n          Alert.alert(\"Notification\", \"Mark as read?\", [{\n            text: \"Mark As Read\",\n            onPress: function onPress() {\n              markAsRead(itemData.item.notificationId);\n            },\n            style: \"cancel\"\n          }, {\n            text: \"Go Back\",\n            onPress: function onPress() {}\n          }]);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return React.createElement(Block, {\n    middle: true,\n    flex: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    keyExtractor: function keyExtractor(item, index) {\n      return item.id.toString();\n    },\n    data: data,\n    renderItem: renderItem,\n    numColumns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default MonitorNotifications;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/MonitorScreens/MonitorNotifications.js"],"names":["React","useEffect","useState","useContext","Block","Text","Notification","argonTheme","LogInContext","getNotificationsByUserId","markNotificationAsRead","ViewNotificationTile","ViewJobsTile","MonitorNotifications","props","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","userInfo","userOrganisation","userId","id","notifications","setNotifications","data","setData","readCounter","setReadCounter","then","response","noteList","forEach","object","push","catch","error","console","log","tableData","notification","key","notificationInfo","notificationId","address","deviceName","faultCause","faultCode","jobName","lastState","read","breakdownTime","formatDateTime","markAsRead","counter","err","date","hour","minute","day","month","length","renderItem","itemData","item","Alert","alert","text","onPress","style","index","toString"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext} from \"react\";\r\nimport {ScrollView, Alert, FlatList, TouchableOpacity, Platform, TouchableNativeFeedback} from \"react-native\";\r\nimport { Block, Text } from \"galio-framework\";\r\nimport { Notification } from \"../components\";\r\nimport { argonTheme } from \"../constants\";\r\n\r\nimport {LogInContext} from \"../context/LogInContext\";\r\nimport {getNotificationsByUserId, markNotificationAsRead} from \"../Services/NotificationService\";\r\nimport ViewNotificationTile from \"../components/ViewNotificationTile\";\r\nimport ViewJobsTile from \"../components/ViewJobsTile\";\r\n\r\n/**\r\n * @author Matt Belgre, Manik Bagga, Chris Bautista\r\n * @description This component displays the notifications saved in the server.\r\n */\r\nconst MonitorNotifications = props => {\r\n\r\n    let TouchableCmp = TouchableOpacity;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= 21) {\r\n        TouchableCmp = TouchableNativeFeedback; //ripple effect\r\n    }\r\n\r\n    const {userInfo} = useContext(LogInContext);\r\n    const {userOrganisation} = useContext(LogInContext);\r\n\r\n    const userId = userInfo.id;\r\n\r\n    const [notifications, setNotifications] = useState([]); //Notifications array\r\n    const [data, setData] = useState([]);\r\n    const [readCounter, setReadCounter] = useState(0);\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The following useEffects gets the notifications from the server and pushes to state.\r\n     */\r\n    useEffect(() => {\r\n            getNotificationsByUserId(userId)\r\n                .then((response) => {\r\n                    const noteList = []\r\n                    response.data.forEach(object => {\r\n                        noteList.push(object)\r\n                    })\r\n                    setNotifications(noteList)\r\n                }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        },\r\n        [userId]);\r\n\r\n    useEffect(() => {\r\n            getNotificationsByUserId(userId)\r\n                .then((response) => {\r\n                    const noteList = []\r\n                    response.data.forEach(object => {\r\n                        noteList.push(object)\r\n                    })\r\n                    setNotifications(noteList)\r\n                }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        },\r\n        [readCounter]);\r\n\r\n    useEffect(() => {\r\n        const tableData = [];\r\n        notifications.forEach((notification, key) => {\r\n            let notificationInfo = {\r\n                id: key,\r\n                notificationId: notification.notificationId,\r\n                address: notification.address,\r\n                deviceName: notification.deviceName,\r\n                faultCause: notification.faultCause,\r\n                faultCode: notification.faultCode,\r\n                jobName: notification.jobName,\r\n                lastState: notification.lastState,\r\n                read: notification.read,\r\n                breakdownTime: formatDateTime(notification.breakdownTime),\r\n            };\r\n            tableData.push(notificationInfo);\r\n        })\r\n        setData(tableData);\r\n    }, [notifications]);\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description This marks a notification as read, pushes to server then updates the state.\r\n     */\r\n    const markAsRead = (id) => {\r\n        //setNotificationModal(null);\r\n        markNotificationAsRead(id).then(()=>{\r\n            const counter = readCounter + 1\r\n            setReadCounter(counter)\r\n        }).catch(err => console.log(err))\r\n    };\r\n\r\n    /**\r\n     * @author Matt Belgre, Manik Bagga\r\n     * @description Formats the date and time returned by the server.\r\n     */\r\n    const formatDateTime = (date) => {\r\n        let hour, minute, day, month;\r\n        if (date[3].length === 1) {\r\n            hour = \"0\" + date[3];\r\n        } else {\r\n            hour = date[3];\r\n        }\r\n        if (date[4].length === 1) {\r\n            minute = \"0\" + date[4];\r\n        } else {\r\n            minute = date[4];\r\n        }\r\n        if (date[2].length === 1) {\r\n            day = \"0\" + date[2];\r\n        } else {\r\n            day = date[2];\r\n        }\r\n        if (date[1].length === 1) {\r\n            month = \"0\" + date[1];\r\n        } else {\r\n            month = date[1];\r\n        }\r\n        return day + '/' + month + '/' + date[0] + '  ' + hour + ':' + minute;\r\n    }\r\n\r\n    const renderItem = itemData => {\r\n        return (\r\n            <ViewNotificationTile\r\n                notificationId={itemData.item.notificationId}\r\n                address={itemData.item.address}\r\n                deviceName={itemData.item.deviceName}\r\n                faultCause={itemData.item.faultCause}\r\n                faultCode={itemData.item.faultCode}\r\n                jobName={itemData.item.jobName}\r\n                lastState={itemData.item.lastState}\r\n                read={itemData.item.read}\r\n                breakdownTime={itemData.item.breakdownTime}\r\n                onSelect={() => {\r\n                    if (!itemData.item.read)\r\n                    {\r\n                        Alert.alert(\r\n                            \"Notification\",\r\n                            \"Mark as read?\",\r\n                            [\r\n                                {\r\n                                    text: \"Mark As Read\",\r\n                                    onPress: () => {\r\n                                        markAsRead(itemData.item.notificationId)\r\n                                    },\r\n                                    style: \"cancel\"\r\n                                },\r\n                                {\r\n                                    text: \"Go Back\", onPress: () => {\r\n                                    }\r\n                                }\r\n                            ]\r\n                        )\r\n                    }\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    return (\r\n      <Block middle flex>\r\n          <FlatList\r\n              keyExtractor={(item, index) => item.id.toString()}  //Need to check which key!!!\r\n              data={data}\r\n              renderItem={renderItem}\r\n              numColumns={1}\r\n          />\r\n      </Block>\r\n    );\r\n}\r\n\r\nexport default MonitorNotifications;\r\n"]},"metadata":{},"sourceType":"module"}