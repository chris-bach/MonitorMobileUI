{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\ReactNative\\\\MonitorMobileUI\\\\MonitorScreens\\\\Dashboard.js\";\n\nimport React, { useEffect, useState, useContext, useRef } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\nimport { argonTheme, tabs } from \"../constants\";\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\nimport axios from \"axios\";\n\nvar _Dimensions$get = Dimensions.get(\"screen\"),\n    width = _Dimensions$get.width;\n\nimport styles from \"../constants/ScreenTheme\";\nimport { LogInContext } from \"../context/LogInContext\";\nimport { getMonthlyBreakdowns } from \"../Services/DashboardService\";\nimport { getBreakdownsPerBuilding } from \"../Services/DashboardService\";\nimport { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph, StackedBarChart } from \"react-native-chart-kit\";\n\nvar Dashboard = function Dashboard() {\n  var _useContext = useContext(LogInContext),\n      userInfo = _useContext.userInfo;\n\n  var _useContext2 = useContext(LogInContext),\n      userOrganisation = _useContext2.userOrganisation;\n\n  var userId = userInfo.id;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      monthlyBreakdownsList = _useState2[0],\n      setMonthlyBreakdownsList = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mlabels = _useState4[0],\n      setmLabels = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mdata = _useState6[0],\n      setmData = _useState6[1];\n\n  var TouchableCmp = TouchableOpacity;\n\n  if (Platform.OS === 'android' && Platform.Version >= 21) {\n    TouchableCmp = TouchableNativeFeedback;\n  }\n\n  useEffect(function () {\n    getMonthlyBreakdowns(userId).then(function (response) {\n      var list = [];\n      response.data.forEach(function (object) {\n        list.push(object);\n      });\n      setMonthlyBreakdownsList(list);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n  useEffect(function () {\n    var listData = [];\n    var listLabels = [];\n    monthlyBreakdownsList.forEach(function (data, key) {\n      var int = parseInt(data.breakdowns);\n      listLabels.push(data.month);\n      listData.push(int);\n    });\n    setmData(listData);\n    setmLabels(listLabels);\n  }, [monthlyBreakdownsList]);\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      breakdownsPerBuildingList = _useState8[0],\n      setBreakdownsPerBuildingList = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      bblabels = _useState10[0],\n      setbbLabels = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      bbdata = _useState12[0],\n      setbbData = _useState12[1];\n\n  useEffect(function () {\n    getBreakdownsPerBuilding(userId).then(function (response) {\n      var list = [];\n      response.data.forEach(function (object) {\n        list.push(object);\n      });\n      setBreakdownsPerBuildingList(list);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n  useEffect(function () {\n    var listData = [];\n    var listLabels = [];\n    breakdownsPerBuildingList.forEach(function (data, key) {\n      var int = parseInt(data.breakdowns);\n      listLabels.push(data.buildingAddress);\n      listData.push(int);\n    });\n    setbbData(listData);\n    setbbLabels(listLabels);\n  }, [breakdownsPerBuildingList]);\n  return React.createElement(Block, {\n    flex: true,\n    style: styles.group,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, React.createElement(Block, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 25\n    }\n  }, \"Monthly Breakdowns\"), React.createElement(BarChart, {\n    data: {\n      labels: mlabels,\n      datasets: [{\n        data: mdata\n      }]\n    },\n    width: Dimensions.get(\"window\").width,\n    height: 220,\n    yAxisLabel: \"\",\n    yAxisSuffix: \"\",\n    yAxisInterval: 1,\n    chartConfig: {\n      backgroundColor: argonTheme.COLORS.PRIMARY,\n      backgroundGradientFrom: argonTheme.COLORS.ACCENT,\n      backgroundGradientTo: \"#ffa726\",\n      decimalPlaces: 0,\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      labelColor: function labelColor() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      style: {\n        borderRadius: 16\n      },\n      propsForDots: {\n        r: \"6\",\n        strokeWidth: \"2\",\n        stroke: \"#ffa726\"\n      }\n    },\n    bezier: true,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 25\n    }\n  }))), React.createElement(Block, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 17\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  }, \"Breakdowns Per Building\"), React.createElement(BarChart, {\n    data: {\n      labels: bblabels,\n      datasets: [{\n        data: bbdata\n      }]\n    },\n    width: Dimensions.get(\"window\").width,\n    height: 500,\n    yAxisLabel: \"\",\n    yAxisSuffix: \"\",\n    yAxisInterval: 1,\n    verticalLabelRotation: 45,\n    chartConfig: {\n      backgroundColor: argonTheme.COLORS.PRIMARY,\n      backgroundGradientFrom: argonTheme.COLORS.ACCENT,\n      backgroundGradientTo: \"#ffa726\",\n      decimalPlaces: 0,\n      color: function color() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      labelColor: function labelColor() {\n        var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return \"rgba(255, 255, 255, \" + opacity + \")\";\n      },\n      style: {\n        borderRadius: 16\n      },\n      propsForDots: {\n        r: \"6\",\n        strokeWidth: \"2\",\n        stroke: \"#ffa726\"\n      }\n    },\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["G:/ReactNative/MonitorMobileUI/MonitorScreens/Dashboard.js"],"names":["React","useEffect","useState","useContext","useRef","Block","Text","Button","GaButton","theme","argonTheme","tabs","Select","Icon","Input","Header","Switch","axios","Dimensions","get","width","styles","LogInContext","getMonthlyBreakdowns","getBreakdownsPerBuilding","LineChart","BarChart","PieChart","ProgressChart","ContributionGraph","StackedBarChart","Dashboard","userInfo","userOrganisation","userId","id","monthlyBreakdownsList","setMonthlyBreakdownsList","mlabels","setmLabels","mdata","setmData","TouchableCmp","TouchableOpacity","Platform","OS","Version","TouchableNativeFeedback","then","response","list","data","forEach","object","push","catch","error","console","log","listData","listLabels","key","int","parseInt","breakdowns","month","breakdownsPerBuildingList","setBreakdownsPerBuildingList","bblabels","setbbLabels","bbdata","setbbData","buildingAddress","group","title","labels","datasets","backgroundColor","COLORS","PRIMARY","backgroundGradientFrom","ACCENT","backgroundGradientTo","decimalPlaces","color","opacity","labelColor","style","borderRadius","propsForDots","r","strokeWidth","stroke","marginVertical"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, useRef} from \"react\";\r\nimport {\r\n    ScrollView,\r\n    View,\r\n    StyleSheet,\r\n    Dimensions,\r\n    TouchableOpacity, Platform, TouchableNativeFeedback, Linking, FlatList\r\n} from \"react-native\";\r\n// Galio components\r\nimport { Block, Text, Button as GaButton, theme } from \"galio-framework\";\r\n// Argon themed components\r\nimport { argonTheme, tabs } from \"../constants\";\r\nimport { Button, Select, Icon, Input, Header, Switch } from \"../components\";\r\n\r\nimport axios from \"axios\";\r\n\r\nconst { width } = Dimensions.get(\"screen\");\r\n\r\nimport styles from \"../constants/ScreenTheme\";\r\nimport {LogInContext} from \"../context/LogInContext\";\r\n\r\nimport {getMonthlyBreakdowns} from \"../Services/DashboardService\";\r\nimport {getBreakdownsPerBuilding} from \"../Services/DashboardService\";\r\n\r\nimport {\r\n    LineChart,\r\n    BarChart,\r\n    PieChart,\r\n    ProgressChart,\r\n    ContributionGraph,\r\n    StackedBarChart\r\n} from \"react-native-chart-kit\";\r\n\r\n/**\r\n * @author Chris Bautista\r\n * @description This component renders the dashboard. It is the home screen of the app after logging in.\r\n */\r\nconst Dashboard = () => {\r\n    // const userId = 1;\r\n    const {userInfo} = useContext(LogInContext);\r\n    const {userOrganisation} = useContext(LogInContext);\r\n\r\n    const userId = userInfo.id;\r\n\r\n    const [monthlyBreakdownsList, setMonthlyBreakdownsList] = useState([]);\r\n    const [mlabels, setmLabels] = useState([]);\r\n    const [mdata, setmData] = useState([]);\r\n\r\n    let TouchableCmp = TouchableOpacity;\r\n\r\n    if (Platform.OS === 'android' && Platform.Version >= 21) {\r\n        TouchableCmp = TouchableNativeFeedback; //ripple effect\r\n    }\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The following useEffects get the monthly breakdown data from the server and pushes into the state.\r\n     */\r\n    useEffect(() => {\r\n            getMonthlyBreakdowns(userId)\r\n                .then((response) => {\r\n                    const list = []\r\n                    response.data.forEach(object => {\r\n                        list.push(object)\r\n                    })\r\n                    setMonthlyBreakdownsList(list);\r\n                }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        },\r\n        []);\r\n\r\n    useEffect(() => {\r\n        const listData = [];\r\n        const listLabels = [];\r\n        monthlyBreakdownsList.forEach((data, key) => {\r\n            let int = parseInt(data.breakdowns)\r\n            listLabels.push(data.month);\r\n            listData.push(int);\r\n        })\r\n        setmData(listData);\r\n        setmLabels(listLabels);\r\n    }, [monthlyBreakdownsList]);\r\n\r\n    const [breakdownsPerBuildingList, setBreakdownsPerBuildingList] = useState([]);\r\n    const [bblabels, setbbLabels] = useState([]);\r\n    const [bbdata, setbbData] = useState([]);\r\n\r\n    /**\r\n     * @author Matt Belgre, Chris Bautista\r\n     * @description The following useEffects get the breakdowns per building data from the server and pushes into the state.\r\n     */\r\n    useEffect(() => {\r\n            getBreakdownsPerBuilding(userId)\r\n                .then((response) => {\r\n                    const list = []\r\n                    response.data.forEach(object => {\r\n                        list.push(object)\r\n                    })\r\n                    setBreakdownsPerBuildingList(list);\r\n                }).catch(error => {\r\n                console.log(error)\r\n            })\r\n        },\r\n        []);\r\n\r\n    useEffect(() => {\r\n        const listData = [];\r\n        const listLabels = [];\r\n        breakdownsPerBuildingList.forEach((data, key) => {\r\n            let int = parseInt(data.breakdowns)\r\n            listLabels.push(data.buildingAddress);\r\n            listData.push(int);\r\n        })\r\n        setbbData(listData);\r\n        setbbLabels(listLabels);\r\n    }, [breakdownsPerBuildingList]);\r\n\r\n    /**\r\n     * @author indiespirit, Chris Bautista\r\n     * @description Renders the dashboard charts using react-native-chart-kit by indiespirit\r\n     */\r\n    return (\r\n        <Block flex style={styles.group}>\r\n            <ScrollView>\r\n                <Block>\r\n                    <View>\r\n                        <Text style={styles.title}>Monthly Breakdowns</Text>\r\n                        <BarChart\r\n                            data={{\r\n                                labels: mlabels,\r\n                                datasets: [\r\n                                    {\r\n                                        data: mdata\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            width={Dimensions.get(\"window\").width} // from react-native\r\n                            height={220}\r\n                            yAxisLabel=\"\"\r\n                            yAxisSuffix=\"\"\r\n                            yAxisInterval={1} // optional, defaults to 1\r\n                            chartConfig={{\r\n                                backgroundColor: argonTheme.COLORS.PRIMARY,\r\n                                backgroundGradientFrom: argonTheme.COLORS.ACCENT,\r\n                                backgroundGradientTo: \"#ffa726\",\r\n                                decimalPlaces: 0, // optional, defaults to 2dp\r\n                                color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                                labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                                style: {\r\n                                    borderRadius: 16\r\n                                },\r\n                                propsForDots: {\r\n                                    r: \"6\",\r\n                                    strokeWidth: \"2\",\r\n                                    stroke: \"#ffa726\"\r\n                                }\r\n                            }}\r\n                            bezier\r\n                            style={{\r\n                                marginVertical: 8,\r\n                                borderRadius: 16\r\n                            }}\r\n                        />\r\n                    </View>\r\n                </Block>\r\n                {/*Table 2*/}\r\n                <Block>\r\n                    <View>\r\n                        <Text style={styles.title}>Breakdowns Per Building</Text>\r\n                        <BarChart\r\n                            data={{\r\n                                labels: bblabels,\r\n                                datasets: [\r\n                                    {\r\n                                        data: bbdata\r\n                                    }\r\n                                ]\r\n                            }}\r\n                            width={Dimensions.get(\"window\").width} // from react-native\r\n                            height={500}\r\n                            yAxisLabel=\"\"\r\n                            yAxisSuffix=\"\"\r\n                            yAxisInterval={1} // optional, defaults to 1\r\n                            verticalLabelRotation={45}\r\n                            chartConfig={{\r\n                                backgroundColor: argonTheme.COLORS.PRIMARY,\r\n                                backgroundGradientFrom: argonTheme.COLORS.ACCENT,\r\n                                backgroundGradientTo: \"#ffa726\",\r\n                                decimalPlaces: 0, // optional, defaults to 2dp\r\n                                color: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                                labelColor: (opacity = 1) => `rgba(255, 255, 255, ${opacity})`,\r\n                                style: {\r\n                                    borderRadius: 16\r\n                                },\r\n                                propsForDots: {\r\n                                    r: \"6\",\r\n                                    strokeWidth: \"2\",\r\n                                    stroke: \"#ffa726\"\r\n                                }\r\n                            }}\r\n                            // bezier\r\n                            style={{\r\n                                marginVertical: 8,\r\n                                borderRadius: 16\r\n                            }}\r\n                        />\r\n                    </View>\r\n                </Block>\r\n            </ScrollView>\r\n        </Block>\r\n    );\r\n}\r\nexport default Dashboard;\r\n"]},"metadata":{},"sourceType":"module"}